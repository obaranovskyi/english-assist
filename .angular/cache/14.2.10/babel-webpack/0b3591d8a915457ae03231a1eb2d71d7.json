{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let WordsService = /*#__PURE__*/(() => {\n  class WordsService {\n    constructor() {\n      this.wordsBhvSubj = new BehaviorSubject([]);\n      this.words$ = this.wordsBhvSubj.asObservable();\n    }\n\n    setWords(words) {\n      this.wordsBhvSubj.next(words);\n    }\n\n    getWords() {\n      return this.wordsBhvSubj.getValue();\n    }\n\n    removeWord(wordToRemove) {\n      this.setWords(this.getWords().filter(word => word.originalValue !== wordToRemove.originalValue));\n    }\n\n    updateWord(wordToUpdate) {\n      this.setWords(this.getWords().map(word => {\n        return word.wordId === wordToUpdate.wordId ? wordToUpdate : word;\n      }));\n    }\n\n    addWord(wordToAdd) {\n      this.setWords([wordToAdd, ...this.getWords()]);\n    }\n\n    cleanAllWords() {\n      this.setWords([]);\n    }\n\n  }\n\n  WordsService.ɵfac = function WordsService_Factory(t) {\n    return new (t || WordsService)();\n  };\n\n  WordsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WordsService,\n    factory: WordsService.ɵfac\n  });\n  return WordsService;\n})();","map":null,"metadata":{},"sourceType":"module"}