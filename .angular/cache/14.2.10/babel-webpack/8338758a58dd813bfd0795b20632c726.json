{"ast":null,"code":"import { ReplaySubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./words.service\";\nexport let CacheService = /*#__PURE__*/(() => {\n  class CacheService {\n    constructor(wordsService) {\n      this.wordsService = wordsService;\n      this.cacheRplSubj = new ReplaySubject(1);\n      this.cache$ = this.cacheRplSubj.asObservable();\n      this.reloadCache();\n    }\n\n    addCurrentToCache(name) {\n      const cache = {\n        name,\n        value: JSON.stringify(this.wordsService.getWords()),\n        date: Date.now()\n      };\n      localStorage.setItem(name, JSON.stringify(cache));\n      this.reloadCache();\n    }\n\n    reloadCache() {\n      const rawValues = this.allValues();\n      const caches = rawValues.map(element => {\n        const parsedCache = JSON.parse(element);\n        return {\n          name: parsedCache.name,\n          value: parsedCache.value,\n          date: Number(parsedCache.date)\n        };\n      });\n      this.setCache(caches);\n    }\n\n    removeCacheByName(name) {\n      localStorage.removeItem(name);\n      this.reloadCache();\n    }\n\n    mergeAll() {\n      const rawValues = this.allValues();\n      const caches = rawValues.map(element => {\n        const parsedCache = JSON.parse(element);\n        return {\n          name: parsedCache.name,\n          value: parsedCache.value,\n          date: Number(parsedCache.date)\n        };\n      });\n      const allWords = [];\n      caches.forEach(cache => {\n        allWords.push(...JSON.parse(cache.value));\n      });\n      const date = new Date();\n      const dateName = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n      const name = `global_merge_${dateName}`;\n      const stringValue = JSON.stringify({\n        name,\n        value: JSON.stringify(allWords),\n        date: Date.now()\n      });\n      localStorage.setItem(name, stringValue);\n      this.reloadCache();\n    }\n\n    allValues() {\n      var values = [],\n          keys = Object.keys(localStorage),\n          i = keys.length;\n\n      while (i--) {\n        values.push(localStorage.getItem(keys[i]));\n      }\n\n      return values;\n    }\n\n    setCache(cache) {\n      this.cacheRplSubj.next(cache);\n    }\n\n  }\n\n  CacheService.ɵfac = function CacheService_Factory(t) {\n    return new (t || CacheService)(i0.ɵɵinject(i1.WordsService));\n  };\n\n  CacheService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CacheService,\n    factory: CacheService.ɵfac\n  });\n  return CacheService;\n})();","map":null,"metadata":{},"sourceType":"module"}